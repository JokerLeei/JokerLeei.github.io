<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JokerLee</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-23T06:31:04.223Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JokerLee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线程池</title>
    <link href="http://yoursite.com/2020/02/22/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://yoursite.com/2020/02/22/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2020-02-22T15:51:40.000Z</published>
    <updated>2020-02-23T06:31:04.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用线程池："><a href="#使用线程池：" class="headerlink" title="使用线程池："></a>使用线程池：</h2><p>​    1.自己定义线程池类实现XX线程池，设置参数…进行操作<br>​    2.使用Executors工具类获取线程池对象</p><h2 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h2><p>​    1.线程重用，避免多次新建销毁<br>​    2.线程并发数控制，并且能对线程管理</p><p>线程池构造参数详解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, // 线程池中的核心线程数</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> maximumPoolSize,                    // 线程池中允许的最大线程数</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">long</span> keepAliveTime,                    // 线程空闲时的存活时间</span></span></span><br><span class="line"><span class="function"><span class="params">    TimeUnit unit,                          // keepAliveTime的单位</span></span></span><br><span class="line"><span class="function"><span class="params">    BlockingQueue&lt;Runnable&gt; workQueue,      // 用来保存等待被执行的任务的阻塞队列</span></span></span><br><span class="line"><span class="function"><span class="params">    ThreadFactory threadFactory,            // 创建线程的工厂</span></span></span><br><span class="line"><span class="function"><span class="params">    RejectedExecutionHandler handler)</span>       <span class="comment">// 线程池的饱和(拒绝)策略</span></span></span><br></pre></td></tr></table></figure><h4 id="corePoolSize"><a href="#corePoolSize" class="headerlink" title="corePoolSize"></a>corePoolSize</h4><p>​    线程池中的核心线程数，当提交一个任务时，线程池创建一个新线程执行任务，直到当前线程数<br>​    等于corePoolSize；如果当前线程数为corePoolSize，继续提交的任务被保存到阻塞队列中，等<br>​    待被执行；如果执行了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有<br>​    核心线程。当线程数小于等于corePoolSize时，默认情况下线程会一直存活在线程池中，即时线<br>​    程处于空闲状态。如果allowCoreThreadTimeOut被设置为true时，无论线程数多少，那么线程处<br>​    于空闲状态超过一定时间就会被销毁掉。</p><h4 id="keepAliveTime"><a href="#keepAliveTime" class="headerlink" title="keepAliveTime"></a>keepAliveTime</h4><p>​    线程空闲时的存活时间，即当线程没有任务执行时，继续存活的时间；默认情况下，该参数只在<br>​    线程数大于corePoolSize时才有用；如果allowCoreThreadTimeOut被设置为true时，无论线程数<br>​    多少，线程处于空闲状态超过一定时间就会被销毁掉。</p><h4 id="TimeUnit"><a href="#TimeUnit" class="headerlink" title="TimeUnit"></a>TimeUnit</h4><p>​    keepAliveTime的单位。TimeUnit是一个枚举类型，其包括：<br>​    NANOSECONDS ：1微毫秒 = 1微秒 / 1000<br>​    MICROSECONDS ：1微秒 = 1毫秒 / 1000<br>​    MILLISECONDS ：1毫秒 = 1秒 /1000<br>​    SECONDS ：秒<br>​    MINUTES ：分<br>​    HOURS ：小时<br>​    DAYS ：天</p><h4 id="workQueue"><a href="#workQueue" class="headerlink" title="workQueue"></a>workQueue</h4><p>​    用来保存等待被执行的任务的阻塞队列，且任务必须实现Runable接口，如下阻塞队列：<br>​    ArrayBlockingQueue：基于数组结构的有界阻塞队列，按FIFO排序任务；<br>​    LinkedBlockingQuene：基于链表结构的无界阻塞队列，按FIFO排序任务，吞吐量通常要高于ArrayBlockingQuene；<br>​    SynchronousQuene：一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作<br>​        一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQuene；</p><h4 id="threadFactory"><a href="#threadFactory" class="headerlink" title="threadFactory"></a>threadFactory</h4><p>​    创建线程的工厂，通过自定义的线程工厂可以给每个新建的线程设置一个具有识别度的线程名</p><h4 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h4><p>​    线程池的饱和策略，当阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，必须采取一种策略处理该任务，<br>​        线程池提供了4种策略：<br>​    AbortPolicy：直接抛出异常，默认策略；<br>​    CallerRunsPolicy：用调用者所在的线程来执行任务；<br>​    DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；<br>​    DiscardPolicy：直接丢弃任务</p><hr><h2 id="线程池分类"><a href="#线程池分类" class="headerlink" title="线程池分类"></a>线程池分类</h2><h2 id="此处为使用Executors工具类获取线程池对象，列出5种常用线程池"><a href="#此处为使用Executors工具类获取线程池对象，列出5种常用线程池" class="headerlink" title="(此处为使用Executors工具类获取线程池对象，列出5种常用线程池)"></a>(此处为使用Executors工具类获取线程池对象，列出5种常用线程池)</h2><h4 id="1、newCachedThreadPool"><a href="#1、newCachedThreadPool" class="headerlink" title="1、newCachedThreadPool"></a>1、newCachedThreadPool</h4><p>​    作用：创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们，并在需要时使用提供的<br>​        ThreadFactory 创建新线程。<br>​    特征：<br>​    （1）线程池中数量没有固定，可达到最大值（Interger. MAX_VALUE）<br>​    （2）线程池中的线程可进行缓存重复利用和回收（回收默认时间为1分钟）<br>​    （3）当线程池中，没有可用线程，会重新创建一个线程<br>​    创建方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Executors.newCachedThreadPool();</span><br></pre></td></tr></table></figure><h4 id="2、newFixedThreadPool"><a href="#2、newFixedThreadPool" class="headerlink" title="2、newFixedThreadPool"></a>2、newFixedThreadPool</h4><p>​    作用：创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。在任意点，在大多数 nThreads<br>​        线程会处于处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务，则在有可用线程之前，附加<br>​        任务将在队列中等待。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线程将代替它执行<br>​        后续的任务（如果需要）。在某个线程被显式地关闭之前，池中的线程将一直存在。<br>​    特征：<br>​    （1）线程池中的线程处于一定的量，可以很好的控制线程的并发量<br>​    （2）线程可以重复被使用，在显示关闭之前，都将一直存在<br>​    （3）超出一定量的线程被提交时候需在队列中等待<br>​    创建方式： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Executors.newFixedThreadPool(<span class="keyword">int</span> nThreads)；<span class="comment">//nThreads为线程的数量 </span></span><br><span class="line">Executors.newFixedThreadPool(<span class="keyword">int</span> nThreads，ThreadFactory threadFactory)；</span><br><span class="line"><span class="comment">// nThreads为线程的数量，threadFactory创建线程的工厂方式</span></span><br></pre></td></tr></table></figure><h4 id="3、newSingleThreadExecutor"><a href="#3、newSingleThreadExecutor" class="headerlink" title="3、newSingleThreadExecutor"></a>3、newSingleThreadExecutor</h4><p>​    作用：创建一个使用单个 worker 线程的 Executor，以无界队列方式来运行该线程。（注意，如果因为在关闭前的执行<br>​        期间出现失败而终止了此单个线程，那么如果需要，一个新线程将代替它执行后续的任务）。可保证顺序地执<br>​        行各个任务，并且在任意给定的时间不会有多个线程是活动的。与其他等效的 newFixedThreadPool(1) 不同，<br>​        可保证无需重新配置此方法所返回的执行程序即可使用其他的线程。<br>​    特征：<br>​    （1）线程池中最多执行1个线程，之后提交的线程活动将会排在队列中以此执行<br>​    创建方式： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Executors.newSingleThreadExecutor() ； </span><br><span class="line">Executors.newSingleThreadExecutor(ThreadFactory threadFactory)；<span class="comment">// threadFactory创建线程的工厂方式</span></span><br></pre></td></tr></table></figure><h4 id="4、newScheduleThreadPool"><a href="#4、newScheduleThreadPool" class="headerlink" title="4、newScheduleThreadPool"></a>4、newScheduleThreadPool</h4><p>​    作用： 创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。<br>​    特征：<br>​    （1）线程池中具有指定数量的线程，即便是空线程也将保留<br>​    （2）可定时或者延迟执行线程活动<br>​    创建方式： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Executors.newScheduledThreadPool(<span class="keyword">int</span> corePoolSize)；<span class="comment">// corePoolSize线程的个数 </span></span><br><span class="line">Executors.newScheduledThreadPool(<span class="keyword">int</span> corePoolSize, ThreadFactory threadFactory)；</span><br><span class="line"><span class="comment">// corePoolSize线程的个数，threadFactory创建线程的工厂</span></span><br></pre></td></tr></table></figure><h4 id="5、newSingleThreadScheduledExecutor"><a href="#5、newSingleThreadScheduledExecutor" class="headerlink" title="5、newSingleThreadScheduledExecutor"></a>5、newSingleThreadScheduledExecutor</h4><p>​    作用： 创建一个单线程执行程序，它可安排在给定延迟后运行命令或者定期地执行。<br>​    特征：<br>​    （1）线程池中最多执行1个线程，之后提交的线程活动将会排在队列中以此执行<br>​    （2）可定时或者延迟执行线程活动<br>​    创建方式： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Executors.newSingleThreadScheduledExecutor() ； </span><br><span class="line">Executors.newSingleThreadScheduledExecutor(ThreadFactory threadFactory) ；<span class="comment">//threadFactory创建线程的工</span></span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用线程池：&quot;&gt;&lt;a href=&quot;#使用线程池：&quot; class=&quot;headerlink&quot; title=&quot;使用线程池：&quot;&gt;&lt;/a&gt;使用线程池：&lt;/h2&gt;&lt;p&gt;​    1.自己定义线程池类实现XX线程池，设置参数…进行操作&lt;br&gt;​    2.使用Executors
      
    
    </summary>
    
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>个人博客攻略</title>
    <link href="http://yoursite.com/2020/02/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5/"/>
    <id>http://yoursite.com/2020/02/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5/</id>
    <published>2020-02-21T04:45:09.000Z</published>
    <updated>2020-02-21T11:20:10.561Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d7e74d1598245886f65717ad333bc3e9039f83b47df067f06458614e4b4571e4"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      密码：love
    
    </summary>
    
    
      <category term="经验" scheme="http://yoursite.com/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>数据库优化</title>
    <link href="http://yoursite.com/2020/02/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/02/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</id>
    <published>2020-02-20T10:53:13.000Z</published>
    <updated>2020-02-21T03:34:32.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h1><p><img src="/2020/02/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/demo.png" alt></p><hr><h2 id="MySql-分析-sql-语句效率"><a href="#MySql-分析-sql-语句效率" class="headerlink" title="MySql 分析 sql 语句效率"></a>MySql 分析 sql 语句效率</h2><h3 id="MySql内部函数-explain（查询sql的执行计划）使用方法以及返回各列的含义"><a href="#MySql内部函数-explain（查询sql的执行计划）使用方法以及返回各列的含义" class="headerlink" title="MySql内部函数 explain（查询sql的执行计划）使用方法以及返回各列的含义"></a>MySql内部函数 explain（查询sql的执行计划）使用方法以及返回各列的含义</h3><p>使用方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> t;</span><br></pre></td></tr></table></figure><p>table:显示这一行的数据是关于哪张表的<br>type:这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、index 和ALL<br>possible_keys:显示可能应用在这张表中的索引。如果为空，没有可能的索引。<br>key:实际使用的索引。如果为NULL,则没有使用索引。<br>keyjen:使用的索引的长度。在不损失精确性的情况下，长度越短越好<br>ref:显示索引的哪一列被使用了，如果可能的话，是一个常数<br>rows: MYSQL认为必须检查的用来返回请求数据的行数</p><hr><h2 id="SQL-语句优化"><a href="#SQL-语句优化" class="headerlink" title="SQL 语句优化"></a>SQL 语句优化</h2><ol><li><p>不使用select *，会生成无用结果</p></li><li><p>where 中不用 null（全表扫描）</p><p>如：    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>为id建立默认值0，然后使用默认值代替null：    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>where 中不用!=或&lt;&gt;（全表扫描）</p></li><li><p>where 中不用 or （全表扫描）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span> <span class="keyword">or</span> <span class="keyword">num</span>=<span class="number">20</span></span><br></pre></td></tr></table></figure><p>改为 union：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">20</span></span><br></pre></td></tr></table></figure></li><li><p>不用 in 和 not in（全表扫描）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">--连续数值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> b) <span class="comment">--不连续数值</span></span><br></pre></td></tr></table></figure><p>对于连续的数值，改为between：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>对于不连续的数值，改为exist：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> b <span class="keyword">where</span> <span class="keyword">num</span>=a.num)</span><br></pre></td></tr></table></figure></li><li><p>模糊查询不能在开头：%xxx%（全表扫描），用 xxx%</p></li><li><p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算（全表扫描）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>/<span class="number">2</span>=<span class="number">100</span></span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">100</span>*<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><ol><li><p>选择合适列建立索引</p><ol><li>首先应考虑在 where 、order by、group by、on 从句中出现的列上建立索引。</li><li>索引字段越小越好，因为数据库里的数据是以页存储的，如果IO一次读取一页的数据很多，这样的话就可以提高服务器IO的效率。</li><li>离散度大的列放到联合索引的前面</li></ol></li><li><p>索引的维护和优化</p><ol><li><p>重复索引<br>重复索引是指相同的列以相同顺序建立的同类型索引，如下表的 primary key 和 ID 列上的索引就是重复索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,  <span class="comment">--primary key(包含unique)</span></span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="keyword">unique</span>(<span class="keyword">id</span>) <span class="comment">--unique</span></span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure></li><li><p>冗余索引<br>冗余索引是指多个索引的前缀相同，或是在联合索引中包含了主键的索引，如下表的 key(name, id) 就是一个冗余索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>, <span class="comment">--创建primary key时自带主键索引</span></span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="keyword">key</span>(<span class="keyword">name</span>, <span class="keyword">id</span>) <span class="comment">--联合索引包含主键索引</span></span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h2 id="数据库结构优化"><a href="#数据库结构优化" class="headerlink" title="数据库结构优化"></a>数据库结构优化</h2><ol><li><h4 id="选择合适的数据类型"><a href="#选择合适的数据类型" class="headerlink" title="选择合适的数据类型"></a>选择合适的数据类型</h4><p>数据类型的选择，重点在于<strong>合适</strong>二字，如何确定选择的数据类型是否合适?</p><ol><li>使用可以存下你的数据的最小的数据类型。</li><li>使用简单的数据类型。Int要比varchar类型在mysql处理上简单。</li><li>尽可能的使用not null定义字段。</li><li>尽量少用text类型，非用不可时最好考虑分表。</li></ol><p>例子：</p><ol><li><p>时间使用 int (timestamp) 类型</p><p>利用 FROM_UNIXTIME()、UNIX_TIMESTAMP() 两个函数进行转换</p></li><li><p>ip 地址使用 bigint 类型</p><p>利用 INET_ATON()、INET_NTOA() 两个函数进行转换</p></li></ol></li><li><h4 id="表的范式化（主要让设计的表满足第三范式）"><a href="#表的范式化（主要让设计的表满足第三范式）" class="headerlink" title="表的范式化（主要让设计的表满足第三范式）"></a>表的范式化（主要让设计的表满足第三范式）</h4></li><li><h4 id="分库、分表（垂直拆分、水平拆分）"><a href="#分库、分表（垂直拆分、水平拆分）" class="headerlink" title="分库、分表（垂直拆分、水平拆分）"></a>分库、分表（垂直拆分、水平拆分）</h4><h3 id="垂直拆分"><a href="#垂直拆分" class="headerlink" title="垂直拆分"></a>垂直拆分</h3><p>垂直拆分原则：</p><ol><li>把不常用的字段单独存放到一个表中</li><li>把大字段独立存放在一个表中</li><li>把经常一起使用的字段存放在一个表中</li></ol><h3 id="水平拆分"><a href="#水平拆分" class="headerlink" title="水平拆分"></a>水平拆分</h3><p>拆分方法：</p><ol><li>对 id 进行 hash 运算，若拆成5个表则使用 mod(id, 5) 取出 0-4 值</li><li>针对不同的 hashId 把数据存储在不同的表中</li></ol><p>问题：</p><ol><li>跨分区表查询</li><li>统计及后台报表</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库优化&quot;&gt;&lt;a href=&quot;#数据库优化&quot; class=&quot;headerlink&quot; title=&quot;数据库优化&quot;&gt;&lt;/a&gt;数据库优化&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2020/02/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98
      
    
    </summary>
    
    
      <category term="知识点" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ACID&amp;事务隔离级别</title>
    <link href="http://yoursite.com/2020/02/20/ACID%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2020/02/20/ACID%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-02-20T10:19:00.000Z</published>
    <updated>2020-02-20T10:47:00.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h1><h2 id="Atomicity（原子性）"><a href="#Atomicity（原子性）" class="headerlink" title="Atomicity（原子性）"></a>Atomicity（原子性）</h2><p>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p><h2 id="Consistency（一致性）"><a href="#Consistency（一致性）" class="headerlink" title="Consistency（一致性）"></a>Consistency（一致性）</h2><p>事务前后数据的完整性必须保持一致。</p><h2 id="Isolation（隔离性）"><a href="#Isolation（隔离性）" class="headerlink" title="Isolation（隔离性）"></a>Isolation（隔离性）</h2><p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p><h2 id="Durability（持久性）"><a href="#Durability（持久性）" class="headerlink" title="Durability（持久性）"></a>Durability（持久性）</h2><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</p><hr><h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><h6 id="事务隔离级别分为四种（级别递增）："><a href="#事务隔离级别分为四种（级别递增）：" class="headerlink" title="事务隔离级别分为四种（级别递增）："></a>事务隔离级别分为四种（级别递增）：</h6><p>1、Read Uncommitted（未提交读） ：事务中的修改，即使没有提交，其他事务也可以看得到，会导致“脏读”、“幻读”和“不可重复读取”。</p><p>2、READ COMMITTED （提交读）：大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但未提交的数据，避免了“脏读取”，但不能避免“幻读”和“不可重复读取”。该级别适用于大多数系统。</p><p>3、REPEATABLE READ（重复读） ：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读取”和“不可重复读取”的情况，但不能避免“幻读”，但是带来了更多的性能损失。</p><p>4、Serializable （串行化）：最严格的级别，事务串行执行，资源消耗最大。</p><table><thead><tr><th align="left">隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td align="left">读未提交（Read uncommitted）</td><td>√</td><td>√</td><td>√</td></tr><tr><td align="left">读已提交（Read committed）</td><td>×</td><td>√</td><td>√</td></tr><tr><td align="left">重复读（Repeatable read）</td><td>×</td><td>×</td><td>√</td></tr><tr><td align="left">串行化（Serializable）</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><hr><h1 id="脏读、不可重复读、幻读"><a href="#脏读、不可重复读、幻读" class="headerlink" title="脏读、不可重复读、幻读"></a>脏读、不可重复读、幻读</h1><h3 id="脏读（前后多次读取，数据内容不一致-修改者事务先开启）"><a href="#脏读（前后多次读取，数据内容不一致-修改者事务先开启）" class="headerlink" title="脏读（前后多次读取，数据内容不一致/修改者事务先开启）"></a>脏读（前后多次读取，数据内容不一致/修改者事务先开启）</h3><p>所谓的脏读，其实就是读到了别的事务回滚前的脏数据。比如事务B执行过程中修改了数据X，在未提交前，事务A读取了X，而事务B却回滚了，这样事务A就形成了脏读。</p><p>也就是说，当前事务读到的数据是别的事务想要修改成为的但是没有修改成功的数据。</p><h3 id="不可重复读（前后多次读取，数据内容不一致-修改者事务后开启）"><a href="#不可重复读（前后多次读取，数据内容不一致-修改者事务后开启）" class="headerlink" title="不可重复读（前后多次读取，数据内容不一致/修改者事务后开启）"></a>不可重复读（前后多次读取，数据内容不一致/修改者事务后开启）</h3><p>事务A首先读取了一条数据，然后执行逻辑的时候，事务B将这条数据改变了，然后事务A再次读取的时候，发现数据不匹配了，就是所谓的不可重复读了。</p><p>也就是说，当前事务先进行了一次数据读取，然后再次读取到的数据是别的事务修改成功的数据，导致两次读取到的数据不匹配，也就照应了不可重复读的语义。</p><h3 id="幻读（前后多次读取，数据总量不一致-修改者事务后开启）"><a href="#幻读（前后多次读取，数据总量不一致-修改者事务后开启）" class="headerlink" title="幻读（前后多次读取，数据总量不一致/修改者事务后开启）"></a>幻读（前后多次读取，数据总量不一致/修改者事务后开启）</h3><p>事务A首先根据条件索引得到N条数据，然后事务B改变了这N条数据之外的M条或者增添了M条符合事务A搜索条件的数据，导致事务A再次搜索发现有N+M条数据了，就产生了幻读。</p><p>也就是说，当前事务读第一次取到的数据比后来读取到数据条目少。</p><h5 id="不可重复读和幻读区别：不可重复读针对update，幻读针对insert和delete"><a href="#不可重复读和幻读区别：不可重复读针对update，幻读针对insert和delete" class="headerlink" title="不可重复读和幻读区别：不可重复读针对update，幻读针对insert和delete"></a><u>不可重复读和幻读区别：不可重复读针对update，幻读针对insert和delete</u></h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ACID&quot;&gt;&lt;a href=&quot;#ACID&quot; class=&quot;headerlink&quot; title=&quot;ACID&quot;&gt;&lt;/a&gt;ACID&lt;/h1&gt;&lt;h2 id=&quot;Atomicity（原子性）&quot;&gt;&lt;a href=&quot;#Atomicity（原子性）&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="知识点" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>B Tree、B+ Tree、B* Tree</title>
    <link href="http://yoursite.com/2020/02/20/B%20Tree/"/>
    <id>http://yoursite.com/2020/02/20/B%20Tree/</id>
    <published>2020-02-20T09:02:14.000Z</published>
    <updated>2020-02-20T10:17:39.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="B-Tree、B-Tree、B-Tree"><a href="#B-Tree、B-Tree、B-Tree" class="headerlink" title="B Tree、B+ Tree、B* Tree"></a>B Tree、B+ Tree、B* Tree</h1><h5 id="B-树索引是B-树在数据库中的一种实现，是最常见也是数据库中使用最为频繁的一种索引。B-树中的B代表平（balance），而不是二叉（binary），因为B-树是从最早的平衡二叉树演化而来的。在讲B-树之前必须先了解二叉查找树、平衡二叉树（AVL-Tree）和平衡多路查找树（B-Tree），B-树即由这些树逐步优化而来。"><a href="#B-树索引是B-树在数据库中的一种实现，是最常见也是数据库中使用最为频繁的一种索引。B-树中的B代表平（balance），而不是二叉（binary），因为B-树是从最早的平衡二叉树演化而来的。在讲B-树之前必须先了解二叉查找树、平衡二叉树（AVL-Tree）和平衡多路查找树（B-Tree），B-树即由这些树逐步优化而来。" class="headerlink" title="B+树索引是B+树在数据库中的一种实现，是最常见也是数据库中使用最为频繁的一种索引。B+树中的B代表平（balance），而不是二叉（binary），因为B+树是从最早的平衡二叉树演化而来的。在讲B+树之前必须先了解二叉查找树、平衡二叉树（AVL Tree）和平衡多路查找树（B-Tree），B+树即由这些树逐步优化而来。"></a>B+树索引是B+树在<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">数据库</a>中的一种实现，是最常见也是数据库中使用最为频繁的一种索引。B+树中的B代表平（balance），而不是二叉（binary），因为B+树是从最早的平衡二叉树演化而来的。在讲B+树之前必须先了解二叉查找树、平衡二叉树（AVL Tree）和平衡多路查找树（B-Tree），B+树即由这些树逐步优化而来。</h5><br><h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><h5 id="二叉树具有以下性质：左子树的键值小于根的键值，右子树的键值大于根的键值。"><a href="#二叉树具有以下性质：左子树的键值小于根的键值，右子树的键值大于根的键值。" class="headerlink" title="二叉树具有以下性质：左子树的键值小于根的键值，右子树的键值大于根的键值。"></a>二叉树具有以下性质：左子树的键值小于根的键值，右子树的键值大于根的键值。</h5><p>如下图所示是一棵平衡查找树</p><p><img src="/2020/02/20/B%20Tree/Tree.png" alt></p><p>对该二叉树的节点进行查找发现深度为1的节点的查找次数为1，深度为2的查找次数为2，深度为n的节点的查找次数为n，因此其平均查找次数为 (1+2+2+3+3+3) / 6 = 2.3次</p><p>二叉查找树可以任意地构造，同样是2,3,5,6,7,8这六个数字，也可以按照下图的方式来构造：</p><p><img src="/2020/02/20/B%20Tree/AVL.png" alt></p><p>但是这棵二叉树的查询效率就低了。因此若想二叉树的查询效率尽可能高，需要这棵二叉树是平衡的，从而引出新的定义——平衡二叉树，或称AVL树。</p><br><h1 id="平衡二叉树-AVL-Tree"><a href="#平衡二叉树-AVL-Tree" class="headerlink" title="平衡二叉树 (AVL Tree)"></a>平衡二叉树 (AVL Tree)</h1><h5 id="平衡二叉树（AVL树）在符合二叉查找树的条件下，还满足任何节点的两个子树的高度最大差为1。下面的两张图片，左边是AVL树，它的任何节点的两个子树的高度差-lt-1；右边的不是AVL树，其根节点的左子树高度为3，而右子树高度为1"><a href="#平衡二叉树（AVL树）在符合二叉查找树的条件下，还满足任何节点的两个子树的高度最大差为1。下面的两张图片，左边是AVL树，它的任何节点的两个子树的高度差-lt-1；右边的不是AVL树，其根节点的左子树高度为3，而右子树高度为1" class="headerlink" title="平衡二叉树（AVL树）在符合二叉查找树的条件下，还满足任何节点的两个子树的高度最大差为1。下面的两张图片，左边是AVL树，它的任何节点的两个子树的高度差&lt;=1；右边的不是AVL树，其根节点的左子树高度为3，而右子树高度为1"></a>平衡二叉树（AVL树）在符合二叉查找树的条件下，还满足任何节点的两个子树的高度最大差为1。下面的两张图片，左边是AVL树，它的任何节点的两个子树的高度差&lt;=1；右边的不是AVL树，其根节点的左子树高度为3，而右子树高度为1</h5><p><img src="/2020/02/20/B%20Tree/AVL2.png" alt></p><br><h1 id="平衡多路查找树（B-Tree）"><a href="#平衡多路查找树（B-Tree）" class="headerlink" title="平衡多路查找树（B-Tree）"></a>平衡多路查找树（B-Tree）</h1><p><img src="/2020/02/20/B%20Tree/BTree.png" alt></p><p>每个节点占用一个盘块的磁盘空间，一个节点上有两个升序排序的关键字和三个指向子树根节点的指针，指针存储的是子节点所在磁盘块的地址。两个关键词划分成的三个范围域对应三个指针指向的子树的数据的范围域。以根节点为例，关键字为17和35，P1指针指向的子树的数据范围为小于17，P2指针指向的子树的数据范围为17~35，P3指针指向的子树的数据范围为大于35。</p><p>模拟查找关键字29的过程：</p><ol><li>根据根节点找到磁盘块1，读入内存。【磁盘I/O操作第1次】</li><li>比较关键字29在区间（17,35），找到磁盘块1的指针P2。</li><li>根据P2指针找到磁盘块3，读入内存。【磁盘I/O操作第2次】</li><li>比较关键字29在区间（26,30），找到磁盘块3的指针P2。</li><li>根据P2指针找到磁盘块8，读入内存。【磁盘I/O操作第3次】</li><li>在磁盘块8中的关键字列表中找到关键字29。</li></ol><p>分析上面过程，发现需要3次磁盘I/O操作，和3次内存查找操作。由于内存中的关键字是一个有序表结构，可以利用二分法查找提高效率。而3次磁盘I/O操作是影响整个B-Tree查找效率的决定因素。B-Tree相对于AVL Tree缩减了节点个数，使每次磁盘I/O取到内存的数据都发挥了作用，从而提高了查询效率。</p><br><h1 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+ Tree"></a>B+ Tree</h1><p>B+Tree是在B-Tree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎就是用B+Tree实现其索引结构。</p><p>从上一节中的B-Tree结构图中可以看到每个节点中不仅包含数据的key值，还有data值。而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小，当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I/O次数，进而影响查询效率。在B+Tree中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。</p><p>B+Tree相对于B-Tree有几点不同：</p><ol><li>非叶子节点只存储键值信息。</li><li>所有叶子节点之间都有一个链指针。</li><li>数据记录都存放在叶子节点中。</li></ol><p>将上一节中的B-Tree优化，由于B+Tree的非叶子节点只存储键值信息，假设每个磁盘块能存储4个键值及指针信息，则变成B+Tree后其结构如下图所示：</p><p><img src="/2020/02/20/B%20Tree/B+Tree.png" alt></p><p>通常在B+Tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。因此可以对B+Tree进行两种查找运算：一种是对于主键的范围查找和分页查找，另一种是从根节点开始，进行随机查找。</p><p>可能上面例子中只有22条数据记录，看不出B+Tree的优点，下面做一个推算：</p><p>InnoDB存储引擎中页的大小为16KB，一般表的主键类型为INT（占用4个字节）或BIGINT（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的一个节点）中大概存储16KB/(8B+8B)=1K个键值（因为是估值，为方便计算，这里的K取值为〖10〗^3）。也就是说一个深度为3的B+Tree索引可以维护10^3 * 10^3 * 10^3 = 10亿 条记录。</p><p>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree的高度一般都在2<del>4层。<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">mysql</a>的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1</del>3次磁盘I/O操作。</p><p>数据库中的B+Tree索引可以分为聚集索引（clustered index）和辅助索引（secondary  index）。上面的B+Tree示例图在数据库中的实现即为聚集索引，聚集索引的B+Tree中的叶子节点存放的是整张表的行记录数据。辅助索引与聚集索引的区别在于辅助索引的叶子节点并不包含行记录的全部数据，而是存储相应行数据的聚集索引键，即主键。当通过辅助索引来查询数据时，InnoDB存储引擎会遍历辅助索引找到主键，然后再通过主键在聚集索引中找到完整的行记录数据。</p><br><h1 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B* Tree"></a>B* Tree</h1><h5 id="是B-树的变体，在B-树的非根和非叶子结点再增加指向兄弟的指针"><a href="#是B-树的变体，在B-树的非根和非叶子结点再增加指向兄弟的指针" class="headerlink" title="是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针"></a>是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针</h5><h5 id="B-树分配新结点的概率比B-树要低，空间使用率更高"><a href="#B-树分配新结点的概率比B-树要低，空间使用率更高" class="headerlink" title="B*树分配新结点的概率比B+树要低，空间使用率更高"></a>B*树分配新结点的概率比B+树要低，空间使用率更高</h5><br><hr><h2 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h2><p>这都是由于B+树和B具有这不同的存储结构所造成的区别，以一个m阶树为例。</p><ol><li>关键字的数量不同；B+树中分支结点有m个关键字，其叶子结点也有m个，其关键字只是起到了一个索引的作用，但是B树虽然也有m个子结点，但是其只拥有m-1个关键字。【注：此处有争议，B+树到底是与B 树n-1个关键字有n棵子树保持一致，还是B+树n个关键字的结点中含有n棵子树；两种定义都可以，只要自己实现的时候统一用一种就行】。</li><li>存储的位置不同；B+树中的数据都存储在叶子结点上，也就是其所有叶子结点的数据组合起来就是完整的数据，但是B树的数据存储在每一个结点中，并不仅仅存储在叶子结点上。而且B+树叶子结点上还存储了指向与该结点相邻的后一个叶子结点的指针信息，这主要是为了加快检索多个相邻叶子结点的效率考虑。</li><li>分支结点的构造不同；分支结点并不存储真正的信息，仅包含着索引信息，其保存着叶子节点的最小值作为索引及其儿子指针（指的是磁盘块的偏移量）。【注：此处有争议，是以最大值还是最小值作为索引看个人实现】。</li><li>查询不同；B树在找到具体的数值以后，则结束，而B+树则需要通过索引找到叶子结点中的数据才结束，也就是说B+树的搜索过程中走了一条从根结点到叶子结点的路径。</li><li>用处不用：由于B+树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在区间查询的情况，所以通常B+树用于数据库索引，而B树则常用于文件索引</li></ol><h2 id="为什么说B-树比B-树更适合实际应用中操作系统的文件索引和数据库索引？"><a href="#为什么说B-树比B-树更适合实际应用中操作系统的文件索引和数据库索引？" class="headerlink" title="为什么说B+树比B-树更适合实际应用中操作系统的文件索引和数据库索引？"></a>为什么说B+树比B-树更适合实际应用中操作系统的文件索引和数据库索引？</h2><p>1) B+树的磁盘读写代价更低<br>　　B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。<br>2) B+树的查询效率更加稳定<br>　　由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;B-Tree、B-Tree、B-Tree&quot;&gt;&lt;a href=&quot;#B-Tree、B-Tree、B-Tree&quot; class=&quot;headerlink&quot; title=&quot;B Tree、B+ Tree、B* Tree&quot;&gt;&lt;/a&gt;B Tree、B+ Tree、B* Tree&lt;/
      
    
    </summary>
    
    
      <category term="知识点" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoursite.com/2020/02/19/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/02/19/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-19T05:06:19.000Z</published>
    <updated>2020-02-23T05:30:23.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>所谓单例，就是整个程序有且仅有一个实例。该类负责创建自己的对象，同时确保只有一个对象被创建。在Java，一般常用在工具类的实现或创建对象需要消耗资源。</p><p><strong>特点</strong></p><ul><li><p>构造器私有</p></li><li><p>在本类中提前(延迟)构造对象</p></li><li><p>对外提供获取本类对象实例的静态方法</p></li></ul><h3 id="饿汉"><a href="#饿汉" class="headerlink" title="饿汉"></a>饿汉</h3><h5 id="线程安全-浪费资源"><a href="#线程安全-浪费资源" class="headerlink" title="线程安全 浪费资源"></a>线程安全 浪费资源</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="普通懒汉"><a href="#普通懒汉" class="headerlink" title="普通懒汉"></a>普通懒汉</h3><h5 id="线程不安全，延迟初始化"><a href="#线程不安全，延迟初始化" class="headerlink" title="线程不安全，延迟初始化"></a>线程不安全，延迟初始化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="升级版-双重锁模式"><a href="#升级版-双重锁模式" class="headerlink" title="升级版 (双重锁模式)"></a>升级版 (双重锁模式)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        双重检查模式，进行了两次的判断，第一次是为了避免不要的实例，第二次是为了进行同步，避免多线程问题。由于<code>singleton=new Singleton()</code>对象的创建在JVM中可能会进行重排序，在多线程访问下存在风险，使用<code>volatile</code>修饰<code>signleton</code>实例变量有效，解决该问题。</p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        只有第一次调用getInstance方法时，虚拟机才加载 SingletonHolder并初始化instance ，只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。</p><h3 id="静态内部类升级版"><a href="#静态内部类升级版" class="headerlink" title="静态内部类升级版"></a>静态内部类升级版</h3><p>​        新建对象方法有4种：new、反射、反序列化、clone</p><p>​        上面得静态内部类法和双重锁法阻止了new，不能clone因为没有实现Cloneable接口</p><p>​        还剩下反射和反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态成员内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单例变量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有化构造方法,保证不被其他类使用构造器实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当私有化构造方法被反射入侵时，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (SingletonHolder.instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取单例模式对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化流调用，返回指定的对象，防止反序列化破坏单例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        如果想支持clone，那么实现Cloneable接口然后在重写的方法里返回SingletonHolder实例即可</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>默认枚举实例的创建是线程安全的，并且在任何情况下都是单例。实际上</p><ul><li>枚举类隐藏了私有的构造器。</li><li>枚举类的域 是相应类型的一个实例对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton  &#123;</span><br><span class="line">    INSTANCE </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//doSomething 该实例支持的行为</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//可以省略此方法，通过Singleton.INSTANCE进行操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton get <span class="title">Instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;p&gt;所谓单例，就是整个程序有且仅有一个实例。该类负责创建自己的对象，同时确保只有一个对象被创建。在Java，一般常用在工具类的实
      
    
    </summary>
    
    
      <category term="知识点" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
